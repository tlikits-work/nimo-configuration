name: "Get New Tag"
description: "Calculate new version tag"
outputs:
  tag_name:
    description: "The generated new version tag"
    value: ${{ steps.get_latest_tag.outputs.latest_tag }}

runs:
  using: "composite"
  steps:
    - name: Get based tag name
      id: get_based_tag
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          // Read the package.json file
          const packageJsonPath = path.join(process.env.GITHUB_WORKSPACE, 'package.json');
          const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));

          // Extract the version and get the prefix
          const version = packageJson.version;
          const versionPrefix = version.split('.').slice(0, 2).join('.') + '.';

          // Set outputs
          core.setOutput('version_prefix', versionPrefix);

    - name: Get latest tag with prefix
      id: get_latest_tag
      uses: actions/github-script@v6
      with:
        script: |
          const prefix = `v${{ steps.get_based_tag.outputs.version_prefix }}`;
          const tags = await github.paginate('GET /repos/{owner}/{repo}/tags', {
            owner: context.repo.owner,
            repo: context.repo.repo
          });

          const filteredTags = tags
            .map(tag => tag.name)
            .filter(tag => tag.startsWith(prefix))
            .sort((a, b) => {
              const versionA = a.replace(prefix, '').split('.').map(Number);
              const versionB = b.replace(prefix, '').split('.').map(Number);
              for (let i = 0; i < Math.max(versionA.length, versionB.length); i++) {
                if ((versionA[i] || 0) > (versionB[i] || 0)) return -1;
                if ((versionA[i] || 0) < (versionB[i] || 0)) return 1;
              }
              return 0;
            });

          const latestExistTag = filteredTags[0] || '';
          if (!latestExistTag) {
            core.setOutput('latest_tag', `${prefix}0`);
            return;
          }
          const latestExistPatch = Number(latestExistTag.split('.')[2]);
          const latestTag = `${prefix}${latestExistPatch + 1}`;
          core.setOutput('latest_tag', latestTag);
